
--Assignment 3
--Task 1: Implement Row Access Policy
--Scenario: Restrict access to patient records based on the userâ€™s region.

CREATE OR REPLACE TABLE HealthcareDB.Patients.PatientRecords_RAP 
(
    PatientID INT IDENTITY(1, 1),          -- Unique patient identifier
    Name STRING,                           -- Patient name
    Diagnosis STRING,                      -- Diagnosis description
    AdmissionDate DATE,                    -- Admission date
    DischargeDate DATE,                    -- Discharge date
    HospitalRegion STRING,                 -- Region or hospital location
    Age INT,                               -- Patient's age
    TotalBill FLOAT,                       -- Total bill amount
    InsuranceProvider STRING,              -- Insurance provider
    Region STRING                          -- Region 
);

INSERT INTO HealthcareDB.Patients.PatientRecords_RAP 
(Name, Diagnosis, AdmissionDate, DischargeDate, HospitalRegion, Age, TotalBill, InsuranceProvider, Region) 
VALUES
('Alice Smith', 'Hypertension', '2024-01-10', '2024-01-15', 'North', 45, 1200.50, 'Provider A', 'AZURE_CENTRALINDIA'),
('Bob Johnson', 'Diabetes', '2024-02-01', '2024-02-10', 'South', 50, 1500.75, 'Provider B', 'AZURE_CENTRALINDIA'),
('Charlie Brown', 'Asthma', '2024-03-05', NULL, 'East', 29, NULL, 'Provider A', 'AZURE_CENTRALINDIA'),
('Diana Prince', 'Pneumonia', '2024-04-20', '2024-04-30', 'West', 38, 2000.00, 'Provider C', 'AZURE_WESTINDIA'),
('Eve White', 'Migraine', '2024-05-10', '2024-05-12', 'North', 32, 800.00, 'Provider B', 'AZURE_WESTINDIA'),
('Brian Lawrence', 'Fever', '2024-06-11', '2024-06-19', 'East', 42, 2800.00, 'Provider C', 'AZURE_WESTINDIA'),
('Nancy Olivia', 'Cold', '2024-05-20', '2024-05-23', 'West', 39, 3100.00, 'Provider D', 'AZURE_SOUTHINDIA');

--Check the table before applying the policy
SELECT * FROM HealthcareDB.Patients.PatientRecords_RAP;

--Create a row access policy:
CREATE OR REPLACE ROW ACCESS POLICY HealthcareDB.Patients.region_policy
AS (row_region STRING)
RETURNS BOOLEAN ->
CURRENT_REGION() = row_region;

--Apply row access policy to the table
ALTER TABLE HealthcareDB.Patients.PatientRecords_RAP
ADD ROW ACCESS POLICY HealthcareDB.Patients.region_policy
ON (region);

--Check the table after applying the policy
SELECT * FROM HealthcareDB.Patients.PatientRecords_RAP;

--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------

--Task 2: Cloning with Time Travel
--Scenario:
--Your team wants to create a clone of a production table to analyze a specific point-in-time data
--version. The table includes patient records, and the goal is to ensure analysis on a historical
--snapshot without modifying the live production data.

--Create a production table and insert data for demonstration.
CREATE OR REPLACE TABLE PatientRecords_CWTT 
(
    PatientID INT,
    Name STRING,
    Diagnosis STRING,
    AdmissionDate DATE
);

INSERT INTO PatientRecords_CWTT 
VALUES
(1, 'Alice', 'Flu', '2024-11-01'),
(2, 'Bob', 'Cold', '2024-11-02'),
(3, 'Charlie', 'Asthma', '2024-11-03');

UPDATE PatientRecords_CWTT
SET Diagnosis = 'Pneumonia'
WHERE PatientID = 1;


CREATE OR REPLACE TABLE PatientRecords_CWTT_Clone
CLONE PatientRecords_CWTT
AT (OFFSET => -60);
--Clones data from 60 seconds ago


SELECT * FROM PatientRecords_CWTT_Clone;

SELECT * FROM PatientRecords_CWTT;



